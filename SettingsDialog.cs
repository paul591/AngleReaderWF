using AngleReaderWF.Properties;
using DevExpress.XtraEditors.Repository;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO.Ports;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Forms;

namespace AngleReaderWF
{
    public partial class SettingsDialog : Form
    {
        Preferences _preferences;
        Log _log;
        MessageQueue _messageQueue;
        bool _followTail = true;

        public SettingsDialog()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
        }

        private void _log_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (_followTail)
            {
                edtLog.SelectionMode = System.Windows.Forms.SelectionMode.One;
                edtLog.SelectedIndex = _log._entries.Count - 1;
            }
            else
            {
                edtLog.SelectionMode = System.Windows.Forms.SelectionMode.None;
                edtLog.SelectedIndex = -1;
            }
        }


        public SettingsDialog(Preferences preferences, Log log, MessageQueue messageQueue)
        {
            InitializeComponent();

            _preferences = preferences;
            _preferences.PropertyChanged += _preferences_PropertyChanged;

            _log = log;

            _log.PropertyChanged += _log_PropertyChanged;

            _messageQueue = messageQueue;

            _messageQueue.AddMessageToQueue("S");

            edtLog.DataSource = _log._entries;

            edtZeroValue.Value = _preferences.ZeroValue;
            edtCOMport.Text = _preferences.COMPort;

            foreach (string s in SerialPort.GetPortNames())
            {
                edtCOMport.Properties.Items.Add(s);
            }
            if (edtCOMport.Properties.Items.Count > 0)
            {
                edtCOMport.EditValue = edtCOMport.Properties.Items[0].ToString();
            }
            else
            {
                edtCOMport.EditValue = "No COM Ports";
            }
        }

        private void _preferences_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            edtFilterDepth.Value = _preferences.FilterDepth;
            edtPPR.Value = _preferences.PulsePerRev;
            edtLoopPeriod.Value = _preferences.LoopInterval;
        }

        private void checkFollowTail_CheckedChanged(object sender, EventArgs e)
        {
            if(_followTail)
            {
                _followTail = false;
            }
            else
            {
                _followTail = true;
            }
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            _messageQueue.AddMessageToQueue("N");
            this.Close();
        }

        private void btnOK_Click(object sender, EventArgs e)
        {
            _messageQueue.AddMessageToQueue("N");
            SendParamteresToDevice();
            this.Close();
        }

        void SendParamteresToDevice()
        {
            String message;

            message = "F" + int.Parse(edtFilterDepth.Text);
            _messageQueue.AddMessageToQueue(message);

            message = "P" + int.Parse(edtPPR.Text);
            _messageQueue.AddMessageToQueue(message);

            message = "L" + int.Parse(edtLoopPeriod.Text);
            _messageQueue.AddMessageToQueue(message);

            _preferences.ZeroValue = (int)edtZeroValue.Value;
            _preferences.COMPort = edtCOMport.Text;

        }

        private void btnApply_Click(object sender, EventArgs e)
        {
            SendParamteresToDevice();
        }

        private void edtTestMode_CheckedChanged(object sender, EventArgs e)
        {
            if(edtTestMode.Checked)
            {
                _messageQueue.AddMessageToQueue("T");
            }
            else
            {
                _messageQueue.AddMessageToQueue("N");
            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            _log._entries.Clear();  
        }

        private void edtCOMport_Click(object sender, EventArgs e)
        {
            edtCOMport.Properties.Items.Clear();

            foreach (string s in SerialPort.GetPortNames())
            {
                edtCOMport.Properties.Items.Add(s);
            }
            if (edtCOMport.Properties.Items.Count > 0)
            {
                edtCOMport.EditValue = edtCOMport.Properties.Items[0].ToString();
            }
            else
            {
                edtCOMport.EditValue = "No COM Ports";
            }
        }
    }
}
